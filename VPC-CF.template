{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Creates a VPC across 2 AZs with 4 subnets in each (Public, App, Data and Management). Creates route tables, NACLs, IGW, NAT , VGW and security groups.",

  "Parameters" : {

    "NATInstanceType" : {
      "Description" : "NAT EC2 instance type, only t1.micro, t2.micro, t2.small, t2.medium and m3.medium",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro","t2.small","t2.medium","m3.medium" ]
    },

    "NATAMI" : {
      "Description" : "Optional: If you have a custom AMI for the NAT instance, enter its ID. (Leave 'default' for regular NAT instance)",
      "Type" : "String",
      "Default" : "default",
      "MaxLength": "12"
    },

    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to launched instances",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters."
    },

    "CorpCIDR" : {
      "Description" : "Specify the CIDR block of the corporate network (used to define security group rules)",
      "Type" : "String",
      "Default" :  "10.0.0.0/8"
    },

    "VPCCIDR" : {
      "Description" : "Specify the CIDR block assigned to the VPC (e.g. 172.20.0.0/16)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "AppSubnetAZ1CIDR" : {
      "Description" : "Specify the CIDR block for the subnet containing all application servers in AZ1",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "AppSubnetAZ2CIDR" : {
      "Description" : "Specify the CIDR block for the subnet containing all application servers in AZ2",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "DataSubnetAZ1CIDR" : {
      "Description" : "Specify the CIDR block for the subnet containing all database servers in AZ1",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "DataSubnetAZ2CIDR" : {
      "Description" : "Specify the CIDR block for the subnet containing all database servers in AZ2",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "PublicSubnetCIDRAZ1" : {
      "Description" : "Specify the CIDR block for the subnet containing all web facing instances and loadbalancers in AZ1",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "PublicSubnetCIDRAZ2" : {
      "Description" : "Specify the CIDR block for the subnet containing all web facing instances and loadbalancers in AZ2",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "MgmtSubnetAZ1CIDR" : {
      "Description" : "Specify the CIDR block for the subnet containing all management servers in AZ1",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "MgmtSubnetAZ2CIDR" : {
      "Description" : "Specify the CIDR block for the subnet containing all management servers in AZ1",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "VPCName" : {
      "Description" : "What is the name of the VPC ? For example it or core (used for tagging)",
      "Type": "String",
      "MinLength": "3",
      "MaxLength": "25",
      "AllowedPattern" : "[a-z]*",
      "ConstraintDescription": "must be all lower case with no spaces"
    },

    "EnvironmentName" : {
      "Description" : "What environment is this VPC supporting qa/prod/stage",
      "Type": "String",
      "AllowedValues" : [ "prod","qa","stage" ],
      "ConstraintDescription": "must be prod, qa or stage"
    },

    "BastionInstanceType" : {
      "Description" : "Specify the instance type for the Bastion host",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro","t2.small","t2.medium","m3.medium" ]
    }

  },

  "Conditions" : {
    "UseDefaultAMI" : {"Fn::Equals" : [{"Ref" : "NATAMI"}, "default"] }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "PV64"   },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "m1.small"    : { "Arch" : "PV64"   },
      "m1.medium"   : { "Arch" : "PV64"   },
      "m1.large"    : { "Arch" : "PV64"   },
      "m1.xlarge"   : { "Arch" : "PV64"   },
      "m2.xlarge"   : { "Arch" : "PV64"   },
      "m2.2xlarge"  : { "Arch" : "PV64"   },
      "m2.4xlarge"  : { "Arch" : "PV64"   },
      "m3.medium"   : { "Arch" : "HVM64"  },
      "m3.large"    : { "Arch" : "HVM64"  },
      "m3.xlarge"   : { "Arch" : "HVM64"  },
      "m3.2xlarge"  : { "Arch" : "HVM64"  },
      "c1.medium"   : { "Arch" : "PV64"   },
      "c1.xlarge"   : { "Arch" : "PV64"   },
      "c3.large"    : { "Arch" : "HVM64"  },
      "c3.xlarge"   : { "Arch" : "HVM64"  },
      "c3.2xlarge"  : { "Arch" : "HVM64"  },
      "c3.4xlarge"  : { "Arch" : "HVM64"  },
      "c3.8xlarge"  : { "Arch" : "HVM64"  },
      "g2.2xlarge"  : { "Arch" : "HVMG2"  },
      "r3.large"    : { "Arch" : "HVM64"  },
      "r3.xlarge"   : { "Arch" : "HVM64"  },
      "r3.2xlarge"  : { "Arch" : "HVM64"  },
      "r3.4xlarge"  : { "Arch" : "HVM64"  },
      "r3.8xlarge"  : { "Arch" : "HVM64"  },
      "i2.xlarge"   : { "Arch" : "HVM64"  },
      "i2.2xlarge"  : { "Arch" : "HVM64"  },
      "i2.4xlarge"  : { "Arch" : "HVM64"  },
      "i2.8xlarge"  : { "Arch" : "HVM64"  },
      "hi1.4xlarge" : { "Arch" : "HVM64"  },
      "hs1.8xlarge" : { "Arch" : "HVM64"  },
      "cr1.8xlarge" : { "Arch" : "HVM64"  },
      "cc2.8xlarge" : { "Arch" : "HVM64"  }
    },
    "AWSRegionArch2AMI" : {
      "us-west-2"  : {"HVM64" : "ami-383a5008"},
      "us-west-1"  : {"HVM64" : "ami-5aba831f"},
      "us-east-1"  : {"HVM64" : "ami-978d91fe"},
      "eu-west-1"  : {"HVM64" : "ami-4b18e33c"},
      "ap-southeast-1" : {"HVM64" : "ami-860d5ed4"},
      "ap-northeast-1"  : {"HVM64" : "ami-bb562fba"},
      "ap-southeast-2" : {"HVM64" : "ami-cf4ad2f5"},
      "sa-east-1"  : {"HVM64" : "ami-635dff7e"}
    },
    "NATRegionArch2AMI" : {
      "us-west-2"      : {"HVM64" : "ami-290f4119"},
      "us-west-1"      : {"HVM64" : "ami-a98396ec"},
      "us-east-1"      : {"HVM64" : "ami-184dc970"},
      "eu-west-1"      : {"HVM64" : "ami-14913f63"},
      "eu-central-1"      : {"HVM64" : "ami-ae380eb3"},
      "ap-southeast-1"      : {"HVM64" : "ami-ac5c7afe"},
      "ap-northeast-1"      : {"HVM64" : "ami-27d6e626"},
      "ap-southeast-2"      : {"HVM64" : "ami-893f53b3"},
      "sa-east-1"      : {"HVM64" : "ami-8122969c"}
    },
    "Region2Principal" : {
      "us-east-1"      : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "us-west-2"      : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "us-west-1"      : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "eu-west-1"      : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "ap-southeast-1" : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "ap-northeast-1" : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "ap-southeast-2" : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "sa-east-1"      : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "cn-north-1"     : { "EC2Principal" : "ec2.amazonaws.com.cn", "OpsWorksPrincipal" : "opsworks.amazonaws.com.cn" },
      "eu-central-1"   : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" }
    },
    "Region2ARNPrefix": {
      "us-east-1"      : { "ARNPrefix": "arn:aws:" },
      "us-west-1"      : { "ARNPrefix": "arn:aws:" },
      "us-west-2"      : { "ARNPrefix": "arn:aws:" },
      "eu-west-1"      : { "ARNPrefix": "arn:aws:" },
      "ap-northeast-1" : { "ARNPrefix": "arn:aws:" },
      "ap-southeast-1" : { "ARNPrefix": "arn:aws:" },
      "ap-southeast-2" : { "ARNPrefix": "arn:aws:" },
      "sa-east-1"      : { "ARNPrefix": "arn:aws:" },
      "cn-north-1"     : { "ARNPrefix": "arn:aws-cn:" },
      "eu-central-1"   : { "ARNPrefix": "arn:aws:" }
    }
  },

  "Resources" : {
    "LogRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": { "Service": [{ "Fn::FindInMap" : ["Region2Principal", {"Ref" : "AWS::Region"}, "EC2Principal"]}] },
            "Action": [ "sts:AssumeRole" ]
        } ] },
        "Path": "/",
        "Policies": [ {
          "PolicyName": "LogRolePolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [ {
              "Effect": "Allow",
              "Action": [ "logs:*" ],
              "Resource": [ { "Fn::Join" : ["", [ { "Fn::FindInMap" : ["Region2ARNPrefix", {"Ref" : "AWS::Region"}, "ARNPrefix"] },
                            "logs:*:*:*" ]]}]
          } ] }
        } ]
      }
    },

    "NATLogRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "LogRole" } ]
      }
    },

    "CloudFormationLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 7
      }
    },

     "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Ref" : "VPCCIDR" },
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "VPCName" }, { "Ref" : "EnvironmentName" }] ] }
          },
          {
            "Key" : "Environment",
            "Value" : { "Ref" : "EnvironmentName" }
          }
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "VPCName" }, { "Ref" : "EnvironmentName" }] ] }
          },
          {
            "Key" : "Function",
            "Value" : "Internet Gateway"
          },
          {
            "Key" : "Environment",
            "Value" : { "Ref" : "EnvironmentName" }
          },
          {
            "Key" : "Layer",
            "Value" : "Network"
          }
        ]
      }
    },

    "AttachInternetGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "VirtualPrivateGateway" : {
      "Type" : "AWS::EC2::VPNGateway",
      "Properties" : {
        "Type" : "ipsec.1",
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "VPCName" }, { "Ref" : "EnvironmentName" }] ] }
          },
          {
            "Key" : "Function",
            "Value" : "Virtual Private Gateway"
          },
          {
            "Key" : "Environment",
            "Value" : { "Ref" : "EnvironmentName" }
          },
          {
            "Key" : "Layer",
            "Value" : "Network"
          }
        ]
      }
   },

   "AttachIVirtualPrivateGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "VpnGatewayId" : { "Ref" : "VirtualPrivateGateway" }
       }
    },

    "ApplicationSubnetAZ1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "AppSubnetAZ1CIDR" },
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] },
        "Tags" : [
          {
            "Key" : "Function",
            "Value" : "Application servers"
          },
          {
            "Key" : "Environment",
            "Value" : { "Ref" : "EnvironmentName" }
          },
          {
            "Key" : "Network",
            "Value" : "Private"
          },
          {
            "Key" : "Name",
            "Value" : "Application Subnet AZ1"
          }
        ]
      }
    },

    "ApplicationSubnetAZ2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "AppSubnetAZ2CIDR" },
        "AvailabilityZone" : { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ] },
        "Tags" : [
          {
            "Key" : "Function",
            "Value" : "Application servers"
          },
          {
            "Key" : "Environment",
            "Value" : { "Ref" : "EnvironmentName" }
          },
          {
            "Key" : "Network",
            "Value" : "Private"
          },
          {
            "Key" : "Name",
            "Value" : "Application Subnet AZ2"
          }
        ]
      }
    },

    "DatabaseSubnetAZ1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "DataSubnetAZ1CIDR" },
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] },
        "Tags" : [
          {
            "Key" : "Function",
            "Value" : "Database servers"
          },
          {
            "Key" : "Environment",
            "Value" : { "Ref" : "EnvironmentName" }
          },
          {
            "Key" : "Network",
            "Value" : "Private"
          },
          {
            "Key" : "Name",
            "Value" : "Database Subnet AZ1"
          }
        ]
      }
    },

    "DatabaseSubnetAZ2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "DataSubnetAZ2CIDR" },
        "AvailabilityZone" : { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ] },
        "Tags" : [
          {
            "Key" : "Function",
            "Value" : "Database servers"
          },
          {
            "Key" : "Environment",
            "Value" : { "Ref" : "EnvironmentName" }
          },
          {
            "Key" : "Network",
            "Value" : "Private"
          },
          {
            "Key" : "Name",
            "Value" : "Database Subnet AZ2"
          }
        ]
      }
    },

    "ManagementSubnetAZ1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "MgmtSubnetAZ1CIDR" },
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] },
        "Tags" : [
          {
            "Key" : "Function",
            "Value" : "Management servers"
          },
          {
            "Key" : "Environment",
            "Value" : { "Ref" : "EnvironmentName" }
          },
          {
            "Key" : "Network",
            "Value" : "Private"
          },
          {
            "Key" : "Name",
            "Value" : "Management Subnet AZ1"
          }
        ]
      }
    },

    "ManagementSubnetAZ2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "MgmtSubnetAZ2CIDR" },
        "AvailabilityZone" : { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ] },
        "Tags" : [
          {
            "Key" : "Function",
            "Value" : "Management servers"
          },
          {
            "Key" : "Environment",
            "Value" : { "Ref" : "EnvironmentName" }
          },
          {
            "Key" : "Network",
            "Value" : "Private"
          },
          {
            "Key" : "Name",
            "Value" : "Management Subnet AZ2"
          }
        ]
      }
    },

    "PublicSubnetAZ1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "PublicSubnetCIDRAZ1" },
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] },
        "Tags" : [
          {
            "Key" : "Function",
            "Value" : "Web servers and load balancers"
          },
          {
            "Key" : "Environment",
            "Value" : { "Ref" : "EnvironmentName" }
          },
          {
            "Key" : "Network",
            "Value" : "Public"
          },
          {
            "Key" : "Name",
            "Value" : "Public Subnet AZ1"
          }
        ]
      }
    },

    "PublicSubnetAZ2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "PublicSubnetCIDRAZ2" },
        "AvailabilityZone" : { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ] },
        "Tags" : [
          {
            "Key" : "Function",
            "Value" : "Web servers and load balancers"
          },
          {
            "Key" : "Environment",
            "Value" : { "Ref" : "EnvironmentName" }
          },
          {
            "Key" : "Network",
            "Value" : "Public"
          },
          {
            "Key" : "Name",
            "Value" : "Public Subnet AZ2"
          }
        ]
      }
    },

    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "DependsOn" : "AttachIVirtualPrivateGateway",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "VPCName" }, { "Ref" : "EnvironmentName" },"Public"] ] }
          },
          {
            "Key" : "Function",
            "Value" : "Route Table"
          },
          {
            "Key" : "Environment",
            "Value" : { "Ref" : "EnvironmentName" }
          },
          {
            "Key" : "Network",
            "Value" : "Public"
          }
        ]
      }
    },

    "VGWRoutePropPublicRouteTable" : {
      "Type" : "AWS::EC2::VPNGatewayRoutePropagation",
      "Properties" : {
        "RouteTableIds" : [{"Ref" : "PublicRouteTable"}],
        "VpnGatewayId" : {"Ref" : "VirtualPrivateGateway"}
      }
    },

    "PrivateRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "DependsOn" : "AttachIVirtualPrivateGateway",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "VPCName" }, { "Ref" : "EnvironmentName" },"Private Route Table"] ] }
          },
          {
            "Key" : "Function",
            "Value" : "Route Table"
          },
          {
            "Key" : "Environment",
            "Value" : { "Ref" : "EnvironmentName" }
          },
          {
            "Key" : "Network",
            "Value" : "Private"
          }
        ]
      }
    },

    "VGWRoutePropPrivateRouteTable" : {
      "Type" : "AWS::EC2::VPNGatewayRoutePropagation",
      "Properties" : {
        "RouteTableIds" : [{"Ref" : "PrivateRouteTable"}],
        "VpnGatewayId" : {"Ref" : "VirtualPrivateGateway"}
      }
    },

    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PrivateRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PrivateRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "InstanceId" : { "Ref" : "NATInstance" }
      }
    },

    "PublicSubnetRouteTableAssociation1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetAZ1" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "PublicSubnetRouteTableAssociation2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetAZ2" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "ManagementSubnetRouteTableAssociation1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "ManagementSubnetAZ1" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },

    "ManagementSubnetRouteTableAssociation2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "ManagementSubnetAZ2" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },

    "ApplicationSubnetRouteTableAssociation1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "ApplicationSubnetAZ1" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },
    "ApplicationSubnetRouteTableAssociation2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "ApplicationSubnetAZ2" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },

    "DatabaseSubnetRouteTableAssociation1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "DatabaseSubnetAZ1" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },
    "DatabaseSubnetRouteTableAssociation2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "DatabaseSubnetAZ2" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },

    "PublicSubnetAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "VPCName" }, { "Ref" : "EnvironmentName" },"Public Subnet ACLs"] ] }
          },
          {
            "Key" : "Layer",
            "Value" : "Network"
          },
          {
            "Key" : "Function",
            "Value" : "Subnet ACL"
          },
          {
            "Key" : "Environment",
            "Value" : { "Ref" : "EnvironmentName" }
          }
        ]
      }
    },

    "PrivateSubnetAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "VPCName" }, { "Ref" : "EnvironmentName" },"Private Subnet ACLs"] ] }
          },
          {
            "Key" : "Layer",
            "Value" : "Network"
          },
          {
            "Key" : "Function",
            "Value" : "Subnet ACL"
          },
          {
            "Key" : "Environment",
            "Value" : { "Ref" : "EnvironmentName" }
          }
        ]
      }
    },

    "PublicInSubnetAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PublicSubnetAcl"},
        "RuleNumber" : "32000",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "Icmp" : { "Code" : "-1", "Type" : "-1"},
        "PortRange" : {"From" : "1", "To" : "65535"}
      }
    },

    "PublicOutSubnetAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PublicSubnetAcl"},
        "RuleNumber" : "32000",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "Icmp" : { "Code" : "-1", "Type" : "-1"},
        "PortRange" : {"From" : "1", "To" : "65535"}
      }
    },

    "PrivateInSubnetAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PrivateSubnetAcl"},
        "RuleNumber" : "32000",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "Icmp" : { "Code" : "-1", "Type" : "-1"},
        "PortRange" : {"From" : "1", "To" : "65535"}
      }
    },

    "PrivateOutSubnetAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PrivateSubnetAcl"},
        "RuleNumber" : "32000",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "Icmp" : { "Code" : "-1", "Type" : "-1"},
        "PortRange" : {"From" : "1", "To" : "65535"}
      }
    },

    "PublicSubnetAclAssociation1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetAZ1" },
        "NetworkAclId" : {"Ref" : "PublicSubnetAcl"}
      }
    },

    "PublicSubnetAclAssociation2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetAZ2" },
        "NetworkAclId" : {"Ref" : "PublicSubnetAcl"}
      }
    },

    "PrivateSubnetAclAssociation1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "ApplicationSubnetAZ1" },
        "NetworkAclId" : {"Ref" : "PrivateSubnetAcl"}
      }
    },

    "PrivateSubnetAclAssociation2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "ApplicationSubnetAZ2" },
        "NetworkAclId" : {"Ref" : "PrivateSubnetAcl"}
      }
    },

    "PrivateSubnetAclAssociation3" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "ManagementSubnetAZ1" },
        "NetworkAclId" : {"Ref" : "PrivateSubnetAcl"}
      }
    },

    "PrivateSubnetAclAssociation4" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "ManagementSubnetAZ2" },
        "NetworkAclId" : {"Ref" : "PrivateSubnetAcl"}
      }
    },

    "PrivateSubnetAclAssociation5" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "DatabaseSubnetAZ1" },
        "NetworkAclId" : {"Ref" : "PrivateSubnetAcl"}
      }
    },

    "PrivateSubnetAclAssociation6" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "DatabaseSubnetAZ2" },
        "NetworkAclId" : {"Ref" : "PrivateSubnetAcl"}
      }
    },

    "NATInstance" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "InternetGateway",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "install_all" : [ "install_cfn", "install_logs" ]
          },

          "install_cfn" : {
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.NATInstance.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource NATInstance ",
                  "         --configsets install_all ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },

            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
          },

          "install_logs": {
            "packages" : {
              "yum" : {
                "awslogs" : []
              }
            },

            "files": {
              "/etc/awslogs/awslogs.conf": {
                "content": { "Fn::Join": [ "", [
                  "[general]\n",
                  "state_file= /var/awslogs/state/agent-state\n",

                  "[/var/log/cloud-init.log]\n",
                  "file = /var/log/cloud-init.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cloud-init.log\n",
                  "datetime_format = \n",

                  "[/var/log/cloud-init-output.log]\n",
                  "file = /var/log/cloud-init-output.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cloud-init-output.log\n",
                  "datetime_format = \n",

                  "[/var/log/cfn-init.log]\n",
                  "file = /var/log/cfn-init.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cfn-init.log\n",
                  "datetime_format = \n",

                  "[/var/log/cfn-hup.log]\n",
                  "file = /var/log/cfn-hup.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cfn-hup.log\n",
                  "datetime_format = \n",

                  "[/var/log/cfn-wire.log]\n",
                  "file = /var/log/cfn-wire.log\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/cfn-wire.log\n",
                  "datetime_format = \n",

                  "[/var/log/httpd]\n",
                  "file = /var/log/httpd/*\n",
                  "log_group_name = ", { "Ref": "CloudFormationLogs" }, "\n",
                  "log_stream_name = {instance_id}/httpd\n",
                  "datetime_format = %d/%b/%Y:%H:%M:%S\n"
                ] ] },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              }
            },
            "commands" : {
              "01_create_state_directory" : {
                "command" : "mkdir -p /var/awslogs/state"
              }
            },
            "services" : {
              "sysvinit" : {
                "awslogs"    : { "enabled" : "true", "ensureRunning" : "true",
                                 "files" : [ "/etc/awslogs/awslogs.conf" ] }
              }
            }
          }
        }
      },
      "Properties" : {
        "SourceDestCheck" : "false",
        "DisableApiTermination" : "true",
        "Monitoring" : "false",
        "InstanceType" : { "Ref" : "NATInstanceType" },
        "IamInstanceProfile" : { "Ref" : "NATLogRoleInstanceProfile" },
        "ImageId" : {
            "Fn::If" : [
              "UseDefaultAMI",
              { "Fn::FindInMap" : [ "NATRegionArch2AMI", { "Ref" : "AWS::Region" },
                                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "NATInstanceType" },
                                          "Arch" ] } ] },
              {"Ref" : "NATAMI"}
            ]},
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "SGNAT" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "PublicSubnetAZ2" }
        }],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             "yum update -y\n",

             "/opt/aws/bin/cfn-init -v ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource NATInstance ",
             "         --configsets install_all ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",

             "/opt/aws/bin/cfn-signal -e $? ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource NATInstance ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}},
        "Tags" : [
          {
            "Key" : "Environment",
            "Value" : { "Ref" : "EnvironmentName" }
          },
          {
            "Key" : "Layer",
            "Value" : "Network"
          },
          {
            "Key" : "Name",
            "Value" : { "Fn::Join" : [ "-", [ "NAT", { "Ref" : "EnvironmentName" }] ] }
          }
        ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      }
    },

    "BastionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "ec2.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "BastionPolicy1": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "EC2-ReadOnly",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "ec2:Describe*",
              "Resource": "*"
            },
           {
             "Effect": "Allow",
              "Action": "elasticloadbalancing:Describe*",
              "Resource": "*"
            },
           {
              "Effect": "Allow",
              "Action": [
                "cloudwatch:ListMetrics",
               "cloudwatch:GetMetricStatistics",
               "cloudwatch:Describe*"
              ],
              "Resource": "*"
            },
           {
              "Effect": "Allow",
             "Action": "autoscaling:Describe*",
              "Resource": "*"
           }
          ]
        },
        "Roles": [
          {
            "Ref": "BastionRole"
          }
        ]
      }
    },
    "BastionInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "BastionRole"
          }
        ]
      }
    },

    "BastionInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "Comment1" : "Install the latest software patches and security updates",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "commands" : {
              "a1" : {
                "command" : "/usr/bin/yum update -y"
              }
            }
          }
        }
      },
      "Properties" : {
        "InstanceType" : { "Ref" : "BastionInstanceType" },
        "DisableApiTermination" : "true",
        "KeyName"  : { "Ref" : "KeyName" },
        "SubnetId" : { "Ref" : "ApplicationSubnetAZ1" },
        "BlockDeviceMappings" : [
          {
            "DeviceName" : "/dev/xvda",
            "Ebs" : { "VolumeSize" : "10", "VolumeType":"gp2" }
          }
        ],
        "ImageId" : {
          "Fn::FindInMap" : [
            "AWSRegionArch2AMI",
            {
              "Ref" : "AWS::Region"
            },
            {
              "Fn::FindInMap" : [
                "AWSInstanceType2Arch",
                {
                  "Ref" : "BastionInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "yum update -y aws-cfn-bootstrap\n",

          "# Helper function\n",
          "function error_exit {\n",
          "  echo $1\n",
          "}\n",
          "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackName" }, " -r BastionInstance ",
          "    --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

          "# Update latest security patches\n",
          "yum update -y\n",

          "# Install yum-cron-security\n",
          "yum install yum-cron-security -y\n"
          ]]}
        },
        "SecurityGroupIds" : [{ "Ref" : "SGCorporateAccess" }],
        "IamInstanceProfile": { "Ref": "BastionInstanceProfile" },
        "Tags" : [
          {
            "Key" : "Function",
            "Value" : "Bastion Host"
          },
          {
            "Key" : "Environment",
            "Value" : { "Fn::Join" : [ "-", [ "Bastion", { "Ref" : "EnvironmentName" }] ] }
          },
          {
            "Key" : "VPC",
            "Value" : { "Ref" : "VPCName" }
          },
          {
            "Key" : "Name",
            "Value" : { "Fn::Join" : [ "-", [ "Bastion", { "Ref" : "EnvironmentName" }] ] }
          }
        ]
      }
    },

   "SGNAT" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "NAT instances security group",
        "VpcId" : {"Ref" : "VPC"},
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : { "Ref" : "VPCCIDR" } },
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Ref" : "VPCCIDR" } },
          { "IpProtocol" : "tcp", "FromPort" : "123", "ToPort" : "123", "CidrIp" : { "Ref" : "VPCCIDR" } },
          { "IpProtocol" : "udp", "FromPort" : "123", "ToPort" : "123", "CidrIp" : { "Ref" : "VPCCIDR" } },
          { "IpProtocol" : "tcp", "FromPort" : "25", "ToPort" : "25", "CidrIp" : { "Ref" : "VPCCIDR" } },
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "CorpCIDR" } },
          { "IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : { "Ref" : "CorpCIDR" } }
        ],
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : "NAT security group"
          },
          {
            "Key" : "Function",
            "Value" : "Security group"
          },
          {
            "Key" : "Environment",
            "Value" : { "Ref" : "EnvironmentName" }
          },
          {
            "Key" : "VPC",
            "Value" : { "Ref" : "VPCName" }
          }
        ]
      }
    },

    "SGCorporateAccess" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Allows management access from corporate network",
        "VpcId" : {"Ref" : "VPC"},
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "CorpCIDR" } },
          { "IpProtocol" : "tcp", "FromPort" : "3389", "ToPort" : "3389", "CidrIp" : { "Ref" : "CorpCIDR" } },
          { "IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : { "Ref" : "CorpCIDR" } }
        ],
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : "Corporate access security group"
          },
          {
            "Key" : "Function",
            "Value" : "Security group"
          },
          {
            "Key" : "Environment",
            "Value" : { "Ref" : "EnvironmentName" }
          },
          {
            "Key" : "VPC",
            "Value" : { "Ref" : "VPCName" }
          }
        ]
      }
    }
  },

  "Outputs" : {

    "VPC" : {
      "Description" : "The new VPC ID",
      "Value" : {"Ref" : "VPC"}
    },

    "PublicSubnets" : {
      "Description" : "The ID's of the public subnets",
      "Value" : { "Fn::Join":["", [
      {"Ref" : "PublicSubnetAZ1" }, " (in ", {"Fn::GetAtt" : [ "PublicSubnetAZ1", "AvailabilityZone" ] }, "), ",
      {"Ref" : "PublicSubnetAZ2" }, " (in ", {"Fn::GetAtt" : [ "PublicSubnetAZ2", "AvailabilityZone" ] }, "), "
        ]]}
    },

    "ApplicationSubnets" : {
      "Description" : "The ID's of the application subnets",
      "Value" : { "Fn::Join":["", [
      {"Ref" : "ApplicationSubnetAZ1" }, " (in ", {"Fn::GetAtt" : [ "ApplicationSubnetAZ1", "AvailabilityZone" ] }, "), ",
      {"Ref" : "ApplicationSubnetAZ2" }, " (in ", {"Fn::GetAtt" : [ "ApplicationSubnetAZ2", "AvailabilityZone" ] }, "), "
        ]]}
    },

    "ManagementSubnets" : {
      "Description" : "The ID's of the management subnets",
      "Value" : { "Fn::Join":["", [
      {"Ref" : "ManagementSubnetAZ1" }, " (in ", {"Fn::GetAtt" : [ "ManagementSubnetAZ1", "AvailabilityZone" ] }, "), ",
      {"Ref" : "ManagementSubnetAZ2" }, " (in ", {"Fn::GetAtt" : [ "ManagementSubnetAZ2", "AvailabilityZone" ] }, "), "
        ]]}
    },

    "DatabaseSubnets" : {
      "Description" : "The ID's of the database subnets",
      "Value" : { "Fn::Join":["", [
      {"Ref" : "DatabaseSubnetAZ1" }, " (in ", {"Fn::GetAtt" : [ "DatabaseSubnetAZ1", "AvailabilityZone" ] }, "), ",
      {"Ref" : "DatabaseSubnetAZ2" }, " (in ", {"Fn::GetAtt" : [ "DatabaseSubnetAZ2", "AvailabilityZone" ] }, ")"
        ]]}
    },

    "SGCorporateAccess" : {
      "Description" : "The ID of the security group used to allow access from the corporate network",
      "Value" : { "Ref" : "SGCorporateAccess" }
    }

  }


}
